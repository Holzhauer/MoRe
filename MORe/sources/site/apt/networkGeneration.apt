	----------------
	MoRe
	----------------
	Sascha Holzhauer
	----------------
	2014-02-27

%{toc|section=0|fromDepth=1|toDepth=3}

Using Network Generators

* Network Generator Classes

[./res/NetworkGeneratorClasses.jpg] Network Generator UML Class Diagram

* Recycling of Network Configurations

	Often, especially for sensitivity analysis, simulations are conducted many times and only one or a few parameters 
	are changed meaning the networks stays constant. Then, especially for resource consuming network builders it is a 
	good idea to generate the network once and store it. MoRe provides suitable features:
		
	Typically, the GRAPHML file is also produced by MoRe using
	{{{../apidocs/de/cesr/more/util/io/MoreIoUtilities.html}<<<MoreIoUtilities#outputGraph()>>>}}
	
	For details, see JavaDoc of {{{../apidocs/de/cesr/more/rs/building/MGeoRsRestoreNetworkBuilder.html}
	<<<MGeoRsRestoreNetworkBuilder>>>}}. The test class 
	{{{../apidocs/de/cesr/more/testing/rs/building/geo/MGeoRsRestoreNetworkBuilderTest.html}<<<MGeoRsRestoreNetworkBuilderTest>>>}}
	contains a complete example.
	
	The builder implements <<<MoreGeoNetworkBuilder>>> in order to substitute such network builders. However, it can also be used to 
	restore networks for agents that are not geographically rooted.
	 

* Adding and Removal of Edges
 
  Network generators that support addition and removal of edges extend 
  {{{../apidocs/de/cesr/more/manipulate/edge/MoreNetworkEdgeModifier.html}<<<MoreNetworkEdgeModifier>>>}}.
  Implementations often depend on the target system like Repast Simphony ({{{../apidocs/de/cesr/more/rs/building/MGeoRsNetworkEdgeModifier.html}<<<MGeoRsNetworkEdgeModifier>>>}}).
  Example: <<<MBaselineDhhRadiusNetworkBuilder>>> extends <<<MGeoRsNetworkService>>>, which uses a <<<MGeoRsNetworkEdgeModifier>>>.
  
  Often, the method <<<addAndLinkNode>>> needs to specified by the network generator by themselves since the way a node is linked a network is not general (e.g.
  <<<MBaselineDhhRadiusNetworkBuilder>>>). The <<<MoreNetworkEdgeModifier>>> can be used in these implementations.
  
  NetworkService classes usually combine the <<<MoreNetworkBuilder>>> and the <<<MoreNetworkModifier>>> interfaces.
  
  There is an interface <<<MoreGeoNetworkEdgeModifier>>> for edge modifiers that support geographies. However, the user needs to take care to assign such a
  <<<MoreNetworkEdgeModifier>>> to the network generator that shall support geographies.
  
  
  The component approach in network generation and manipulation is much more flexible than encapsulating all network operations within the network object.
  It allows using e.g. different edge modifiers as ones that have geography support only in certain contexts, for instance initialisation or for certain model
  configurations.
  
  
* Homophily-based Distance Depending Forest Fire Network Service

	The {{{../apidocs/de/cesr/more/rs/building/MGeoRsHomophilyDistanceFfNetworkService.html}
	<<<MGeoRsHomophilyDistanceFfNetworkService>>>}} seeks to incorporate important features for ABM:
	
	[[*]] Milieu-specific degree distributions
	
	[[*]] Milieu-specific distance distributions
	
	[[*]] Milieu-specific milieu composition prefereces
	
	[[*]] Focus on modularity
	
	
** Creating Hexagon Shapefiles

	Hexagon shapefiles are required to determine distances between agents. Since the size of hexagons
	depends on the simuulation region and desired performance, often according hexagon shapefiles
	need to be created anew:
	
	[[1]] Download and install {{{http://www.qgis.org}QuantumGIS}}
	
	[[1]] Download and install the python plugin {{{http://michaelminn.com/linux/mmqgis/}<<<mmqgis>>>}}
	
	[[1]] Settings > Project Properties > Select "WTS 84 / UTM zone 32N"
	
	[[1]] Choose <plugins> > <mmqgis> > <create> > <Create Grid Layer>
	
	[[1]] Select <Hexagon (polygon)> at the bottom
	
	[[1]] Adapt and use these values (here for a 1km x 1km area with 200m wide hexagons; note that the
	hexagon shapefile's boundary exceeds the actual area in order to cover the entire region.):
	
*-------------*--------------*
Left X | -150
*-------------*--------------*
Width | 1300
*-------------*--------------*
Bottom Y | -150
*-------------*--------------*
Height | 1200
*-------------*--------------*
H Spacing | 200
*-------------*--------------*
V Spacing | auto
*-------------*--------------*
	
	[[1]] Make sure that the shapefile defines the correct CRS (usually the plugin does not assign a CRS)
	
Implementing Network Builders

  There are several ways to implement network generators that comply with the various MoRe interfaces:

  * The most easy way is to extends the <<<MNetworkService>>> class which implements both <<<MoreNetworkBuilder>>> and <<<MoreNetworkService>>>.
  See <<<MCompleteNetworkGenerator>>> for the simplest example.
  
  * To implement the <<<MoreGeoNetworkBuilder>>> one might extend <<<MGeoRsNetworkService>>>. In order to use common network generation code for the standard network
  builder and  e.g. the RS geography version one could source out such code, as was done in <<<MSmallWorldBetaModelNetworkGenerator>>>.
  
  * In case you prefer to extends the standard network builder to implement the RS geogrpahy version, you could use the <<<MGeoRsNetworkService>>>
  as a component and add forwarding methods to this component.
  
  To specify a general network generator as RS and/or geography network generator it is normally sufficient to
  
  * assign a <<<MoreGeoNetworkEdgeModifier>>> instead of a <<<MoreNetworkEdgeModifier>>>
  
  * implement <<<MoreGeoNetworkService>>> or extend <<<MGeoRsNetworkService>>> and copy & paste the special network generator code (since JAVA does
  not allow multiple inheritance).
  
  Network Builders should have at least two constructors:
  
  * One with only <<<MoreEdgeFactory>>> as parameter
  
  * One with <<<MoreEdgeFactory>>> and <<<String>>> as name as parameter